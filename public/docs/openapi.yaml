openapi: 3.0.3
info:
  title: MoboEats
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/v1/login:
    post:
      summary: 'User API resource'
      operationId: userAPIResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Authentication Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: nschulist@example.org
                password:
                  type: string
                  description: ''
                  example: D1FPFh
                userType:
                  type: string
                  description: ''
                  example: qui
              required:
                - email
                - password
                - userType
      security: []
  /api/v1/orderer/cart:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ''
                  example: 8
              required:
                - userId
      security: []
  '/api/v1/orderer/cart/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 424a527c-15f6-4b85-b2d1-c1e1a21c162w
        required: true
        schema:
          type: string
  /api/v1/orderer/cart-items:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart Items Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart Items Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: integer
                  description: ''
                  example: 1
                quantity:
                  type: integer
                  description: ''
                  example: 2
                status:
                  type: integer
                  description: ''
                  example: 7
              required:
                - menuId
                - quantity
      security: []
  '/api/v1/orderer/cart-items/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart Items Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart Items Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: integer
                  description: ''
                  example: 2
                quantity:
                  type: integer
                  description: ''
                  example: 7
                status:
                  type: integer
                  description: ''
                  example: 2
              required:
                - menuId
                - quantity
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart Items Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the cart item.'
        example: 085b995b-e9f2-4e64-887b-37b422b7ba66
        required: true
        schema:
          type: string
  /api/v1/orderer/orders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: integer
                  description: ''
                  example: 15
                restaurantId:
                  type: integer
                  description: ''
                  example: 12
                delivery:
                  type: boolean
                  description: ''
                  example: false
                deliveryFee:
                  type: string
                  description: 'This field is required when <code>delivery</code> is <code>=</code> or <code>true</code>.'
                  example: null
                deliveryAddress:
                  type: string
                  description: 'This field is required when <code>delivery</code> is <code>=</code> or <code>true</code>.'
                  example: null
              required:
                - cartId
                - restaurantId
                - delivery
      security: []
  '/api/v1/orderer/orders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 6a2011e6-6be5-4763-9c64-ab94b59cd7ff
        required: true
        schema:
          type: string
  /api/v1/restaurant/orders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
  '/api/v1/restaurant/orders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 6a2011e6-6be5-4763-9c64-ab94b59cd7ff
        required: true
        schema:
          type: string
  /api/v1/orderer/restaurant-bookmark:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Restaurants Bookmark Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Restaurants Bookmark Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantId:
                  type: integer
                  description: ''
                  example: 12
              required:
                - restaurantId
      security: []
  '/api/v1/orderer/restaurant-bookmark/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Restaurants Bookmark Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Restaurants Bookmark Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the restaurant bookmark.'
        example: 476e078f-3ad2-45b6-8bd6-051145768faa
        required: true
        schema:
          type: string
  /api/v1/orderer/menu-bookmark:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer menu Bookmark Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer menu Bookmark Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: integer
                  description: ''
                  example: 2
              required:
                - menuId
      security: []
  '/api/v1/orderer/menu-bookmark/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer menu Bookmark Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer menu Bookmark Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the menu bookmark.'
        example: 96d91d74-fc7d-468d-a00d-9c244b6f0a7d
        required: true
        schema:
          type: string
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/v1/register:
    post:
      summary: ''
      operationId: postApiV1Register
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: j
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: connor18@example.com
                password:
                  type: string
                  description: ''
                  example: officia
                userType:
                  type: string
                  description: ''
                  example: sit
                otp:
                  type: string
                  description: ''
                  example: null
                image:
                  type: string
                  description: ''
                  example: null
                phoneNo:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
                - password
                - userType
      security: []
  /api/v1/logout:
    post:
      summary: ''
      operationId: postApiV1Logout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/v1/user:
    get:
      summary: ''
      operationId: getApiV1User
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/v1/orderer/orderer-food-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: provident
                description:
                  type: string
                  description: ''
                  example: in
                status:
                  type: string
                  description: ''
                  example: null
                createdBy:
                  type: string
                  description: ''
                  example: corporis
              required:
                - title
                - description
                - createdBy
      security: []
  '/api/v1/orderer/orderer-food-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: ipsum
                description:
                  type: string
                  description: ''
                  example: consequatur
                status:
                  type: string
                  description: ''
                  example: aut
                updatedBy:
                  type: string
                  description: ''
                  example: aliquid
              required:
                - title
                - description
                - status
                - updatedBy
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer food category.'
        example: ut
        required: true
        schema:
          type: string
  /api/v1/restaurant/food-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: consequatur
                description:
                  type: string
                  description: ''
                  example: iusto
                status:
                  type: string
                  description: ''
                  example: null
                createdBy:
                  type: string
                  description: ''
                  example: eos
              required:
                - title
                - description
                - createdBy
      security: []
  '/api/v1/restaurant/food-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: tempore
                description:
                  type: string
                  description: ''
                  example: praesentium
                status:
                  type: string
                  description: ''
                  example: consequatur
                updatedBy:
                  type: string
                  description: ''
                  example: aut
              required:
                - title
                - description
                - status
                - updatedBy
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the food category.'
        example: omnis
        required: true
        schema:
          type: string
  /api/v1/orderer/orderer-food-sub-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: est
                description:
                  type: string
                  description: ''
                  example: beatae
                status:
                  type: integer
                  description: ''
                  example: 6
                createdBy:
                  type: string
                  description: ''
                  example: aliquam
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - createdBy
                - categoryIds
      security: []
  '/api/v1/orderer/orderer-food-sub-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: ducimus
                description:
                  type: string
                  description: ''
                  example: sed
                status:
                  type: string
                  description: ''
                  example: null
                updatedBy:
                  type: string
                  description: ''
                  example: distinctio
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - updatedBy
                - categoryIds
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer food sub category.'
        example: corrupti
        required: true
        schema:
          type: string
  /api/v1/restaurant/food-sub-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: magni
                description:
                  type: string
                  description: ''
                  example: dignissimos
                status:
                  type: integer
                  description: ''
                  example: 9
                createdBy:
                  type: string
                  description: ''
                  example: et
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - createdBy
                - categoryIds
      security: []
  '/api/v1/restaurant/food-sub-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: aut
                description:
                  type: string
                  description: ''
                  example: temporibus
                status:
                  type: string
                  description: ''
                  example: null
                updatedBy:
                  type: string
                  description: ''
                  example: omnis
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - updatedBy
                - categoryIds
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the food sub category.'
        example: commodi
        required: true
        schema:
          type: string
  /api/v1/restaurant/food-sub-categories/bulk:
    post:
      summary: ''
      operationId: postApiV1RestaurantFoodSubCategoriesBulk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      security: []
  /api/v1/orderer/orderer-menu:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: categories
          description: 'to fetch categories associated with Menu'
          example: delectus
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: delectus
        -
          in: query
          name: subCategories
          description: 'to fetch categories associated with Menu'
          example: itaque
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: itaque
        -
          in: query
          name: restaurant
          description: 'to fetch restaurant that owns with Menu'
          example: doloremque
          required: false
          schema:
            type: string
            description: 'to fetch restaurant that owns with Menu'
            example: doloremque
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: nulla
                description:
                  type: string
                  description: ''
                  example: quis
                status:
                  type: integer
                  description: ''
                  example: 20
                createdBy:
                  type: string
                  description: ''
                  example: vitae
                restaurantId:
                  type: string
                  description: ''
                  example: culpa
                standardPrice:
                  type: number
                  description: ''
                  example: 7.269577
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 7
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 14
                  items:
                    type: integer
              required:
                - title
                - description
                - createdBy
                - restaurantId
                - standardPrice
                - image
      security: []
  '/api/v1/orderer/orderer-menu/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 4ed672f1-a950-37d5-8a74-cea52f8ed4d3
                title:
                  type: string
                  description: ''
                  example: ullam
                description:
                  type: string
                  description: ''
                  example: praesentium
                status:
                  type: integer
                  description: ''
                  example: 17
                updatedBy:
                  type: string
                  description: ''
                  example: quos
                restaurantId:
                  type: string
                  description: ''
                  example: molestias
                standardPrice:
                  type: string
                  description: ''
                  example: unde
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 18
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 5
                  items:
                    type: integer
              required:
                - uuid
                - title
                - description
                - updatedBy
                - restaurantId
                - standardPrice
                - image
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer menu.'
        example: ea
        required: true
        schema:
          type: string
  /api/v1/restaurant/menu:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: categories
          description: 'to fetch categories associated with Menu'
          example: id
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: id
        -
          in: query
          name: subCategories
          description: 'to fetch categories associated with Menu'
          example: architecto
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: architecto
        -
          in: query
          name: restaurant
          description: 'to fetch restaurant that owns with Menu'
          example: porro
          required: false
          schema:
            type: string
            description: 'to fetch restaurant that owns with Menu'
            example: porro
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: tenetur
                description:
                  type: string
                  description: ''
                  example: dolores
                status:
                  type: integer
                  description: ''
                  example: 7
                createdBy:
                  type: string
                  description: ''
                  example: aut
                restaurantId:
                  type: string
                  description: ''
                  example: commodi
                standardPrice:
                  type: number
                  description: ''
                  example: 15.8297746
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 10
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 18
                  items:
                    type: integer
              required:
                - title
                - description
                - createdBy
                - restaurantId
                - standardPrice
                - image
      security: []
  '/api/v1/restaurant/menu/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 95c94345-d62d-346c-8887-04770695b27e
                title:
                  type: string
                  description: ''
                  example: consequatur
                description:
                  type: string
                  description: ''
                  example: eligendi
                status:
                  type: integer
                  description: ''
                  example: 3
                updatedBy:
                  type: string
                  description: ''
                  example: nostrum
                restaurantId:
                  type: string
                  description: ''
                  example: illum
                standardPrice:
                  type: string
                  description: ''
                  example: nihil
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 20
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 3
                  items:
                    type: integer
              required:
                - uuid
                - title
                - description
                - updatedBy
                - restaurantId
                - standardPrice
                - image
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 7eb6bb38-6d64-4eac-a1a4-7ecf164d2c46
        required: true
        schema:
          type: string
  /api/v1/orderer/orderers:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Orderer/Customer Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Orderer/Customer Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: eos
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: gorczany.elvera@example.com
                phoneNo:
                  type: string
                  description: ''
                  example: null
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                mapLocation:
                  type: string
                  description: ''
                  example: null
                image:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
      security: []
  '/api/v1/orderer/orderers/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Orderer/Customer Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Orderer/Customer Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 5b1e44d5-abef-3e33-8eeb-3d4c01147780
                name:
                  type: string
                  description: ''
                  example: dolores
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: ypredovic@example.org
                phoneNo:
                  type: string
                  description: ''
                  example: occaecati
                address:
                  type: string
                  description: ''
                  example: sint
                city:
                  type: string
                  description: ''
                  example: dignissimos
                state:
                  type: string
                  description: ''
                  example: rem
                mapLocation:
                  type: string
                  description: ''
                  example: nisi
                image:
                  type: string
                  description: ''
                  example: null
              required:
                - uuid
                - name
                - email
                - phoneNo
                - address
                - city
                - state
                - mapLocation
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Orderer/Customer Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 5726ffff-3ef4-4237-b61b-5ac351a1b9b1
        required: true
        schema:
          type: string
  /api/v1/orderer/payment:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Payment Post Controller'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Payment Post Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  description: ''
                  example: et
              required:
                - orderId
      security: []
  '/api/v1/orderer/payment/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Payment Post Controller'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Payment Post Controller'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 101383a5-7be7-3afe-9e40-e5f7a0b855ef
        required: true
        schema:
          type: string
  /api/api/create-paypal-order:
    post:
      summary: ''
      operationId: postApiApiCreatePaypalOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Payment Post Controller'
      security: []
  /api/api/capture-paypal-order:
    post:
      summary: ''
      operationId: postApiApiCapturePaypalOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Payment Post Controller'
      security: []
  /api/v1/orderer/orderer-restaurants:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: questionnaire
          description: 'to fetch associated restaurant questionnaire answers'
          example: quos
          required: false
          schema:
            type: string
            description: 'to fetch associated restaurant questionnaire answers'
            example: quos
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: excepturi
                nameShort:
                  type: string
                  description: ''
                  example: null
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: keshaun.brakus@example.net
                about:
                  type: string
                  description: ''
                  example: null
                aboutShort:
                  type: string
                  description: ''
                  example: null
                phoneNo:
                  type: string
                  description: ''
                  example: null
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                mapLocation:
                  type: string
                  description: ''
                  example: null
                latitude:
                  type: string
                  description: ''
                  example: null
                longitude:
                  type: string
                  description: ''
                  example: null
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
      security: []
  '/api/v1/orderer/orderer-restaurants/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: fdfeb00a-1ad4-35fc-978e-0646f8b1e164
                name:
                  type: string
                  description: ''
                  example: unde
                nameShort:
                  type: string
                  description: ''
                  example: laudantium
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: alfredo.schiller@example.net
                about:
                  type: string
                  description: ''
                  example: rerum
                aboutShort:
                  type: string
                  description: ''
                  example: est
                phoneNo:
                  type: string
                  description: ''
                  example: et
                address:
                  type: string
                  description: ''
                  example: vel
                city:
                  type: string
                  description: ''
                  example: dolore
                state:
                  type: string
                  description: ''
                  example: dicta
                postalCode:
                  type: string
                  description: ''
                  example: voluptate
                mapLocation:
                  type: string
                  description: ''
                  example: aliquam
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - uuid
                - name
                - nameShort
                - email
                - about
                - aboutShort
                - phoneNo
                - address
                - city
                - state
                - postalCode
                - mapLocation
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer restaurant.'
        example: doloribus
        required: true
        schema:
          type: string
  /api/v1/restaurant/restaurants:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: questionnaire
          description: 'to fetch associated restaurant questionnaire answers'
          example: exercitationem
          required: false
          schema:
            type: string
            description: 'to fetch associated restaurant questionnaire answers'
            example: exercitationem
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: voluptas
                nameShort:
                  type: string
                  description: ''
                  example: null
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: electa.larson@example.net
                about:
                  type: string
                  description: ''
                  example: null
                aboutShort:
                  type: string
                  description: ''
                  example: null
                phoneNo:
                  type: string
                  description: ''
                  example: null
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                mapLocation:
                  type: string
                  description: ''
                  example: null
                latitude:
                  type: string
                  description: ''
                  example: null
                longitude:
                  type: string
                  description: ''
                  example: null
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
      security: []
  '/api/v1/restaurant/restaurants/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the restaurant.'
        example: 21cba068-7884-4f94-88a0-e65edfeebe1f
        required: true
        schema:
          type: string
  '/api/v1/restaurant/restaurants/{uuid}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 8452dda1-9743-393a-878c-0f52e46cfbc5
                name:
                  type: string
                  description: ''
                  example: nemo
                nameShort:
                  type: string
                  description: ''
                  example: ratione
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: margaretta57@example.com
                about:
                  type: string
                  description: ''
                  example: officia
                aboutShort:
                  type: string
                  description: ''
                  example: debitis
                phoneNo:
                  type: string
                  description: ''
                  example: sint
                address:
                  type: string
                  description: ''
                  example: nobis
                city:
                  type: string
                  description: ''
                  example: sapiente
                state:
                  type: string
                  description: ''
                  example: ipsum
                postalCode:
                  type: string
                  description: ''
                  example: eaque
                mapLocation:
                  type: string
                  description: ''
                  example: quisquam
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - uuid
                - name
                - nameShort
                - email
                - about
                - aboutShort
                - phoneNo
                - address
                - city
                - state
                - postalCode
                - mapLocation
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 21cba068-7884-4f94-88a0-e65edfeebe1f
        required: true
        schema:
          type: string
  /api/v1/restaurant/more-info:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Questionnaire'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Questionnaire'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantUuid:
                  type: string
                  description: ''
                  example: magnam
                delivery:
                  type: string
                  description: ''
                  example: odio
                booking:
                  type: string
                  description: ''
                  example: quae
              required:
                - restaurantUuid
                - delivery
                - booking
      security: []
  '/api/v1/restaurant/more-info/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Questionnaire'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Questionnaire'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Questionnaire'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the more info.'
        example: totam
        required: true
        schema:
          type: string
  /api/v1/restaurant/riders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
  '/api/v1/restaurant/riders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: 'Use uuid to get the specified resource.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: 'Use uuid as identifier.'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 0aeaf0b0-5239-364a-9298-1b81370d5011
                name:
                  type: string
                  description: ''
                  example: quidem
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: bcasper@example.net
                phoneNo:
                  type: string
                  description: ''
                  example: itaque
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                profilePicture:
                  type: string
                  description: ''
                  example: null
                vehicleType:
                  type: string
                  description: ''
                  example: magni
                vehicleLicensePlate:
                  type: string
                  description: ''
                  example: aut
                status:
                  type: string
                  description: ''
                  example: inventore
              required:
                - uuid
                - name
                - email
                - phoneNo
                - vehicleType
                - vehicleLicensePlate
                - status
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: 'Use uuid as identifier..'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 2a4cb41f-94f2-341b-8ce0-8290cb15629c
        required: true
        schema:
          type: string
  /api/v1/restaurant/order-riders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
  '/api/v1/restaurant/order-riders/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: 'Use uuid to get the specified resource.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: 'Use uuid as identifier.'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 68e2f2d2-e40a-326c-9b69-24d809e27dfc
                name:
                  type: string
                  description: ''
                  example: omnis
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: uriel.harber@example.com
                phoneNo:
                  type: string
                  description: ''
                  example: necessitatibus
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                profilePicture:
                  type: string
                  description: ''
                  example: null
                vehicleType:
                  type: string
                  description: ''
                  example: nam
                vehicleLicensePlate:
                  type: string
                  description: ''
                  example: quia
                status:
                  type: string
                  description: ''
                  example: earum
              required:
                - uuid
                - name
                - email
                - phoneNo
                - vehicleType
                - vehicleLicensePlate
                - status
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: 'Use uuid as identifier..'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order rider.'
        example: fugit
        required: true
        schema:
          type: string
  /api/v1/rider/riders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
  '/api/v1/rider/riders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: 'Use uuid to get the specified resource.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: 'Use uuid as identifier.'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: b9f082b6-4081-3872-a87b-bc59f14cdb00
                name:
                  type: string
                  description: ''
                  example: rerum
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: nitzsche.alek@example.org
                phoneNo:
                  type: string
                  description: ''
                  example: et
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                profilePicture:
                  type: string
                  description: ''
                  example: null
                vehicleType:
                  type: string
                  description: ''
                  example: beatae
                vehicleLicensePlate:
                  type: string
                  description: ''
                  example: quo
                status:
                  type: string
                  description: ''
                  example: dignissimos
              required:
                - uuid
                - name
                - email
                - phoneNo
                - vehicleType
                - vehicleLicensePlate
                - status
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: 'Use uuid as identifier..'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: ca832b09-636f-375f-9e60-47f54880d586
        required: true
        schema:
          type: string
tags:
  -
    name: 'Authentication Management'
    description: ''
  -
    name: 'Customer Cart'
    description: "\nCart API resource"
  -
    name: 'Customer Cart Items Management'
    description: "\nCart Items API resource"
  -
    name: 'Customer Order Management'
    description: "\nCustomer Order API resource"
  -
    name: 'Customer Restaurants Bookmark Management'
    description: "\nRestaurantBookmark API resource"
  -
    name: 'Customer menu Bookmark Management'
    description: "\nMenuBookmark API resource"
  -
    name: Endpoints
    description: ''
  -
    name: 'Food Categories Management'
    description: "\nFood Category API resource"
  -
    name: 'Food Sub Categories'
    description: "\nFood Sub Categories API resource"
  -
    name: 'Menu Management'
    description: "\nMenu API resource"
  -
    name: 'Orderer/Customer Management'
    description: "\nOrderer/Customer API resource"
  -
    name: 'Payment Post Controller'
    description: "\nPayment API resource"
  -
    name: 'Restaurant Management'
    description: "\nRestaurant API resource"
  -
    name: 'Restaurant Questionnaire'
    description: "\nQuestionnaire API resource"
  -
    name: 'Rider Management'
    description: "\nRider API resource"
