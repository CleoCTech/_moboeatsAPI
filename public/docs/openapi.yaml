openapi: 3.0.3
info:
  title: MoboEats
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/v1/login:
    post:
      summary: 'User API resource'
      operationId: userAPIResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Authentication Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: annamae.hagenes@example.com
                password:
                  type: string
                  description: ''
                  example: ';.\cP~c}&'
                userType:
                  type: string
                  description: ''
                  example: id
              required:
                - email
                - password
                - userType
      security: []
  /api/v1/orderer/cart:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ''
                  example: 12
              required:
                - userId
      security: []
  '/api/v1/orderer/cart/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 424a527c-15f6-4b85-b2d1-c1e1a21c162w
        required: true
        schema:
          type: string
  /api/v1/orderer/cart-items:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart Items Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart Items Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: integer
                  description: ''
                  example: 20
                quantity:
                  type: integer
                  description: ''
                  example: 1
                status:
                  type: integer
                  description: ''
                  example: 12
              required:
                - menuId
                - quantity
      security: []
  '/api/v1/orderer/cart-items/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Cart Items Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart Items Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: integer
                  description: ''
                  example: 7
                quantity:
                  type: integer
                  description: ''
                  example: 8
                status:
                  type: integer
                  description: ''
                  example: 20
              required:
                - menuId
                - quantity
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Cart Items Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the cart item.'
        example: 085b995b-e9f2-4e64-887b-37b422b7ba66
        required: true
        schema:
          type: string
  /api/v1/orderer/orders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: integer
                  description: ''
                  example: 11
                restaurantId:
                  type: integer
                  description: ''
                  example: 10
                delivery:
                  type: boolean
                  description: ''
                  example: false
                deliveryFee:
                  type: string
                  description: 'This field is required when <code>delivery</code> is <code>=</code> or <code>true</code>.'
                  example: null
                deliveryAddress:
                  type: string
                  description: 'This field is required when <code>delivery</code> is <code>=</code> or <code>true</code>.'
                  example: null
              required:
                - cartId
                - restaurantId
                - delivery
      security: []
  '/api/v1/orderer/orders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 6a2011e6-6be5-4763-9c64-ab94b59cd7ff
        required: true
        schema:
          type: string
  /api/v1/restaurant/orders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
  '/api/v1/restaurant/orders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Order Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Order Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 6a2011e6-6be5-4763-9c64-ab94b59cd7ff
        required: true
        schema:
          type: string
  /api/v1/orderer/restaurant-bookmark:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Restaurants Bookmark Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Restaurants Bookmark Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantId:
                  type: integer
                  description: ''
                  example: 20
              required:
                - restaurantId
      security: []
  '/api/v1/orderer/restaurant-bookmark/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer Restaurants Bookmark Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer Restaurants Bookmark Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the restaurant bookmark.'
        example: 476e078f-3ad2-45b6-8bd6-051145768faa
        required: true
        schema:
          type: string
  /api/v1/orderer/menu-bookmark:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer menu Bookmark Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer menu Bookmark Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuId:
                  type: integer
                  description: ''
                  example: 3
              required:
                - menuId
      security: []
  '/api/v1/orderer/menu-bookmark/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Customer menu Bookmark Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Customer menu Bookmark Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the menu bookmark.'
        example: 96d91d74-fc7d-468d-a00d-9c244b6f0a7d
        required: true
        schema:
          type: string
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/v1/register:
    post:
      summary: ''
      operationId: postApiV1Register
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: kuanuuwhnamwq
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: kaleigh.hettinger@example.net
                password:
                  type: string
                  description: ''
                  example: error
                userType:
                  type: string
                  description: ''
                  example: accusantium
                otp:
                  type: string
                  description: ''
                  example: null
                image:
                  type: string
                  description: ''
                  example: null
                phoneNo:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
                - password
                - userType
      security: []
  /api/v1/logout:
    post:
      summary: ''
      operationId: postApiV1Logout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /api/v1/user:
    get:
      summary: ''
      operationId: getApiV1User
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/v1/orderer/orderer-food-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: debitis
                description:
                  type: string
                  description: ''
                  example: aut
                status:
                  type: string
                  description: ''
                  example: null
                createdBy:
                  type: string
                  description: ''
                  example: tenetur
              required:
                - title
                - description
                - createdBy
      security: []
  '/api/v1/orderer/orderer-food-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: provident
                description:
                  type: string
                  description: ''
                  example: molestiae
                status:
                  type: string
                  description: ''
                  example: velit
                updatedBy:
                  type: string
                  description: ''
                  example: maxime
              required:
                - title
                - description
                - status
                - updatedBy
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer food category.'
        example: quia
        required: true
        schema:
          type: string
  /api/v1/restaurant/food-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: et
                description:
                  type: string
                  description: ''
                  example: rerum
                status:
                  type: string
                  description: ''
                  example: null
                createdBy:
                  type: string
                  description: ''
                  example: facere
              required:
                - title
                - description
                - createdBy
      security: []
  '/api/v1/restaurant/food-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Categories Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: numquam
                description:
                  type: string
                  description: ''
                  example: tempore
                status:
                  type: string
                  description: ''
                  example: non
                updatedBy:
                  type: string
                  description: ''
                  example: molestias
              required:
                - title
                - description
                - status
                - updatedBy
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Categories Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the food category.'
        example: ducimus
        required: true
        schema:
          type: string
  /api/v1/orderer/orderer-food-sub-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: impedit
                description:
                  type: string
                  description: ''
                  example: voluptatem
                status:
                  type: integer
                  description: ''
                  example: 5
                createdBy:
                  type: string
                  description: ''
                  example: eum
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - createdBy
                - categoryIds
      security: []
  '/api/v1/orderer/orderer-food-sub-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: rerum
                description:
                  type: string
                  description: ''
                  example: odio
                status:
                  type: string
                  description: ''
                  example: null
                updatedBy:
                  type: string
                  description: ''
                  example: corporis
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - updatedBy
                - categoryIds
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer food sub category.'
        example: est
        required: true
        schema:
          type: string
  /api/v1/restaurant/food-sub-categories:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: commodi
                description:
                  type: string
                  description: ''
                  example: rerum
                status:
                  type: integer
                  description: ''
                  example: 4
                createdBy:
                  type: string
                  description: ''
                  example: aut
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - createdBy
                - categoryIds
      security: []
  '/api/v1/restaurant/food-sub-categories/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Food Sub Categories'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: quas
                description:
                  type: string
                  description: ''
                  example: adipisci
                status:
                  type: string
                  description: ''
                  example: null
                updatedBy:
                  type: string
                  description: ''
                  example: sequi
                categoryIds:
                  type: object
                  description: ''
                  example: []
                  properties: []
              required:
                - title
                - description
                - updatedBy
                - categoryIds
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the food sub category.'
        example: omnis
        required: true
        schema:
          type: string
  /api/v1/restaurant/food-sub-categories/bulk:
    post:
      summary: ''
      operationId: postApiV1RestaurantFoodSubCategoriesBulk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Food Sub Categories'
      security: []
  /api/v1/orderer/orderer-menu:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: categories
          description: 'to fetch categories associated with Menu'
          example: quisquam
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: quisquam
        -
          in: query
          name: subCategories
          description: 'to fetch categories associated with Menu'
          example: voluptates
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: voluptates
        -
          in: query
          name: restaurant
          description: 'to fetch restaurant that owns with Menu'
          example: voluptatibus
          required: false
          schema:
            type: string
            description: 'to fetch restaurant that owns with Menu'
            example: voluptatibus
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: praesentium
                description:
                  type: string
                  description: ''
                  example: voluptatum
                status:
                  type: integer
                  description: ''
                  example: 16
                createdBy:
                  type: string
                  description: ''
                  example: deleniti
                restaurantId:
                  type: string
                  description: ''
                  example: suscipit
                standardPrice:
                  type: number
                  description: ''
                  example: 297048.76332011
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 10
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 14
                  items:
                    type: integer
              required:
                - title
                - description
                - createdBy
                - restaurantId
                - standardPrice
                - image
      security: []
  '/api/v1/orderer/orderer-menu/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 826e4901-7852-3fc5-8107-57c97e078952
                title:
                  type: string
                  description: ''
                  example: et
                description:
                  type: string
                  description: ''
                  example: dicta
                status:
                  type: integer
                  description: ''
                  example: 1
                updatedBy:
                  type: string
                  description: ''
                  example: error
                restaurantId:
                  type: string
                  description: ''
                  example: omnis
                standardPrice:
                  type: string
                  description: ''
                  example: doloribus
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 1
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 12
                  items:
                    type: integer
              required:
                - uuid
                - title
                - description
                - updatedBy
                - restaurantId
                - standardPrice
                - image
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer menu.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/restaurant/menu:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: categories
          description: 'to fetch categories associated with Menu'
          example: tempore
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: tempore
        -
          in: query
          name: subCategories
          description: 'to fetch categories associated with Menu'
          example: est
          required: false
          schema:
            type: string
            description: 'to fetch categories associated with Menu'
            example: est
        -
          in: query
          name: restaurant
          description: 'to fetch restaurant that owns with Menu'
          example: est
          required: false
          schema:
            type: string
            description: 'to fetch restaurant that owns with Menu'
            example: est
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: voluptatem
                description:
                  type: string
                  description: ''
                  example: et
                status:
                  type: integer
                  description: ''
                  example: 6
                createdBy:
                  type: string
                  description: ''
                  example: ullam
                restaurantId:
                  type: string
                  description: ''
                  example: maxime
                standardPrice:
                  type: number
                  description: ''
                  example: 1092802.827
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 19
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 2
                  items:
                    type: integer
              required:
                - title
                - description
                - createdBy
                - restaurantId
                - standardPrice
                - image
      security: []
  '/api/v1/restaurant/menu/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Menu Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 33b8d96a-92e8-31b9-a67d-dd89e2093c29
                title:
                  type: string
                  description: ''
                  example: fugiat
                description:
                  type: string
                  description: ''
                  example: occaecati
                status:
                  type: integer
                  description: ''
                  example: 1
                updatedBy:
                  type: string
                  description: ''
                  example: consequatur
                restaurantId:
                  type: string
                  description: ''
                  example: tempora
                standardPrice:
                  type: string
                  description: ''
                  example: et
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 2048 kilobytes.'
                categoryIds:
                  type: array
                  description: ''
                  example:
                    - 17
                  items:
                    type: integer
                subcategoryIds:
                  type: array
                  description: ''
                  example:
                    - 17
                  items:
                    type: integer
              required:
                - uuid
                - title
                - description
                - updatedBy
                - restaurantId
                - standardPrice
                - image
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Menu Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 7eb6bb38-6d64-4eac-a1a4-7ecf164d2c46
        required: true
        schema:
          type: string
  /api/v1/orderer/orderers:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Orderer/Customer Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Orderer/Customer Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: saepe
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: tshanahan@example.net
                phoneNo:
                  type: string
                  description: ''
                  example: null
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                mapLocation:
                  type: string
                  description: ''
                  example: null
                image:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
      security: []
  '/api/v1/orderer/orderers/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Orderer/Customer Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Orderer/Customer Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 3a6ca52e-400c-3e47-992d-01b8cd146c6f
                name:
                  type: string
                  description: ''
                  example: amet
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: anita.bauch@example.net
                phoneNo:
                  type: string
                  description: ''
                  example: unde
                address:
                  type: string
                  description: ''
                  example: dignissimos
                city:
                  type: string
                  description: ''
                  example: non
                state:
                  type: string
                  description: ''
                  example: facilis
                mapLocation:
                  type: string
                  description: ''
                  example: dolor
                image:
                  type: string
                  description: ''
                  example: null
              required:
                - uuid
                - name
                - email
                - phoneNo
                - address
                - city
                - state
                - mapLocation
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Orderer/Customer Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 5726ffff-3ef4-4237-b61b-5ac351a1b9b1
        required: true
        schema:
          type: string
  /api/v1/orderer/payment:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Payment Post Controller'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Payment Post Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  description: ''
                  example: 18
                transactionId:
                  type: string
                  description: ''
                  example: quis
                paymentMethod:
                  type: string
                  description: ''
                  example: rerum
                amount:
                  type: integer
                  description: ''
                  example: 7
                createdBy:
                  type: string
                  description: ''
                  example: pariatur
              required:
                - orderId
                - transactionId
                - paymentMethod
                - amount
                - createdBy
      security: []
  '/api/v1/orderer/payment/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Payment Post Controller'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Payment Post Controller'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 54b2cc4d-0037-3e31-896e-7805a9a32ae5
        required: true
        schema:
          type: string
  /api/v1/orderer/orderer-restaurants:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: questionnaire
          description: 'to fetch associated restaurant questionnaire answers'
          example: ducimus
          required: false
          schema:
            type: string
            description: 'to fetch associated restaurant questionnaire answers'
            example: ducimus
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: corporis
                nameShort:
                  type: string
                  description: ''
                  example: null
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: lmarks@example.org
                about:
                  type: string
                  description: ''
                  example: null
                aboutShort:
                  type: string
                  description: ''
                  example: null
                phoneNo:
                  type: string
                  description: ''
                  example: null
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                mapLocation:
                  type: string
                  description: ''
                  example: null
                latitude:
                  type: string
                  description: ''
                  example: null
                longitude:
                  type: string
                  description: ''
                  example: null
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
      security: []
  '/api/v1/orderer/orderer-restaurants/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: c54f8b81-7ad9-3ff1-9051-c5b918fc2b11
                name:
                  type: string
                  description: ''
                  example: porro
                nameShort:
                  type: string
                  description: ''
                  example: nesciunt
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: general93@example.com
                about:
                  type: string
                  description: ''
                  example: rerum
                aboutShort:
                  type: string
                  description: ''
                  example: laboriosam
                phoneNo:
                  type: string
                  description: ''
                  example: voluptatem
                address:
                  type: string
                  description: ''
                  example: accusantium
                city:
                  type: string
                  description: ''
                  example: cumque
                state:
                  type: string
                  description: ''
                  example: est
                postalCode:
                  type: string
                  description: ''
                  example: molestiae
                mapLocation:
                  type: string
                  description: ''
                  example: et
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - uuid
                - name
                - nameShort
                - email
                - about
                - aboutShort
                - phoneNo
                - address
                - city
                - state
                - postalCode
                - mapLocation
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the orderer restaurant.'
        example: occaecati
        required: true
        schema:
          type: string
  /api/v1/restaurant/restaurants:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters:
        -
          in: query
          name: questionnaire
          description: 'to fetch associated restaurant questionnaire answers'
          example: perspiciatis
          required: false
          schema:
            type: string
            description: 'to fetch associated restaurant questionnaire answers'
            example: perspiciatis
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: commodi
                nameShort:
                  type: string
                  description: ''
                  example: null
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: jamel17@example.org
                about:
                  type: string
                  description: ''
                  example: null
                aboutShort:
                  type: string
                  description: ''
                  example: null
                phoneNo:
                  type: string
                  description: ''
                  example: null
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                mapLocation:
                  type: string
                  description: ''
                  example: null
                latitude:
                  type: string
                  description: ''
                  example: null
                longitude:
                  type: string
                  description: ''
                  example: null
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - name
                - email
      security: []
  '/api/v1/restaurant/restaurants/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 0f4702a4-be11-3d21-a282-e0ac41d1ba2e
                name:
                  type: string
                  description: ''
                  example: qui
                nameShort:
                  type: string
                  description: ''
                  example: voluptatem
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: emily52@example.org
                about:
                  type: string
                  description: ''
                  example: voluptatum
                aboutShort:
                  type: string
                  description: ''
                  example: et
                phoneNo:
                  type: string
                  description: ''
                  example: doloribus
                address:
                  type: string
                  description: ''
                  example: optio
                city:
                  type: string
                  description: ''
                  example: qui
                state:
                  type: string
                  description: ''
                  example: fugiat
                postalCode:
                  type: string
                  description: ''
                  example: animi
                mapLocation:
                  type: string
                  description: ''
                  example: corporis
                url:
                  type: string
                  description: ''
                  example: null
                logo:
                  type: string
                  description: ''
                  example: null
              required:
                - uuid
                - name
                - nameShort
                - email
                - about
                - aboutShort
                - phoneNo
                - address
                - city
                - state
                - postalCode
                - mapLocation
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 21cba068-7884-4f94-88a0-e65edfeebe1f
        required: true
        schema:
          type: string
  /api/v1/restaurant/more-info:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Questionnaire'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Questionnaire'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantUuid:
                  type: string
                  description: ''
                  example: hic
                delivery:
                  type: string
                  description: ''
                  example: ipsum
                booking:
                  type: string
                  description: ''
                  example: sapiente
              required:
                - restaurantUuid
                - delivery
                - booking
      security: []
  '/api/v1/restaurant/more-info/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Restaurant Questionnaire'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Questionnaire'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Restaurant Questionnaire'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the more info.'
        example: deleniti
        required: true
        schema:
          type: string
  /api/v1/restaurant/riders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
  '/api/v1/restaurant/riders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: 'Use uuid to get the specified resource.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: 'Use uuid as identifier.'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: b570dcef-e57d-374c-8149-ad9bd05217aa
                name:
                  type: string
                  description: ''
                  example: et
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: ihauck@example.net
                phoneNo:
                  type: string
                  description: ''
                  example: fugiat
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                profilePicture:
                  type: string
                  description: ''
                  example: null
                vehicleType:
                  type: string
                  description: ''
                  example: totam
                vehicleLicensePlate:
                  type: string
                  description: ''
                  example: architecto
                status:
                  type: string
                  description: ''
                  example: reiciendis
              required:
                - uuid
                - name
                - email
                - phoneNo
                - vehicleType
                - vehicleLicensePlate
                - status
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: 'Use uuid as identifier..'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: 00ad98be-d1c5-3ca4-a466-1ca796791b2e
        required: true
        schema:
          type: string
  /api/v1/restaurant/order-riders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
  '/api/v1/restaurant/order-riders/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: 'Use uuid to get the specified resource.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: 'Use uuid as identifier.'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: 45e91bbc-c3e1-338e-abca-2d51df9e9670
                name:
                  type: string
                  description: ''
                  example: doloremque
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: halle08@example.org
                phoneNo:
                  type: string
                  description: ''
                  example: rem
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                profilePicture:
                  type: string
                  description: ''
                  example: null
                vehicleType:
                  type: string
                  description: ''
                  example: ullam
                vehicleLicensePlate:
                  type: string
                  description: ''
                  example: saepe
                status:
                  type: string
                  description: ''
                  example: dolore
              required:
                - uuid
                - name
                - email
                - phoneNo
                - vehicleType
                - vehicleLicensePlate
                - status
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: 'Use uuid as identifier..'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order rider.'
        example: provident
        required: true
        schema:
          type: string
  /api/v1/rider/riders:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
  '/api/v1/rider/riders/{uuid}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: 'Use uuid to get the specified resource.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rider Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: 'Use uuid as identifier.'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 'Must be a valid UUID.'
                  example: e1d3aa9a-88d1-3a5d-9526-f07bcb5bc1b9
                name:
                  type: string
                  description: ''
                  example: eveniet
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: crystel.ritchie@example.com
                phoneNo:
                  type: string
                  description: ''
                  example: quaerat
                address:
                  type: string
                  description: ''
                  example: null
                city:
                  type: string
                  description: ''
                  example: null
                state:
                  type: string
                  description: ''
                  example: null
                postalCode:
                  type: string
                  description: ''
                  example: null
                profilePicture:
                  type: string
                  description: ''
                  example: null
                vehicleType:
                  type: string
                  description: ''
                  example: totam
                vehicleLicensePlate:
                  type: string
                  description: ''
                  example: sapiente
                status:
                  type: string
                  description: ''
                  example: quisquam
              required:
                - uuid
                - name
                - email
                - phoneNo
                - vehicleType
                - vehicleLicensePlate
                - status
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: 'Use uuid as identifier..'
      parameters: []
      responses: {  }
      tags:
        - 'Rider Management'
      security: []
    parameters:
      -
        in: path
        name: uuid
        description: ''
        example: f4ccec45-2013-3328-b796-9f4269a494f5
        required: true
        schema:
          type: string
tags:
  -
    name: 'Authentication Management'
    description: ''
  -
    name: 'Customer Cart'
    description: "\nCart API resource"
  -
    name: 'Customer Cart Items Management'
    description: "\nCart Items API resource"
  -
    name: 'Customer Order Management'
    description: "\nCustomer Order API resource"
  -
    name: 'Customer Restaurants Bookmark Management'
    description: "\nRestaurantBookmark API resource"
  -
    name: 'Customer menu Bookmark Management'
    description: "\nMenuBookmark API resource"
  -
    name: Endpoints
    description: ''
  -
    name: 'Food Categories Management'
    description: "\nFood Category API resource"
  -
    name: 'Food Sub Categories'
    description: "\nFood Sub Categories API resource"
  -
    name: 'Menu Management'
    description: "\nMenu API resource"
  -
    name: 'Orderer/Customer Management'
    description: "\nOrderer/Customer API resource"
  -
    name: 'Payment Post Controller'
    description: "\nPayment API resource"
  -
    name: 'Restaurant Management'
    description: "\nRestaurant API resource"
  -
    name: 'Restaurant Questionnaire'
    description: "\nQuestionnaire API resource"
  -
    name: 'Rider Management'
    description: "\nRider API resource"
